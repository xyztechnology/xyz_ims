using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using Inventory.Models;
using InventroryManagementSystem.Models;
using System.IO;

namespace InventroryManagementSystem.Controllers
{
    public class ProductController : Controller
    {
        private ApplicationDbContext db = new ApplicationDbContext();

        // GET: /Product/
        public ActionResult Index()
        {
            Product model = new Product();
            model.ProductList = new List<Product>();
           // var ProductList = db.Product.Include(p => p.Category).Include(p => p.FileAttachmentId).Include(p => p.LocationId).Include(p => p.UserId).Include(p => p.VendorId);
            model.ProductList = db.Product.Include(v => v.Category).ToList();
            return View(model);
        }

            // GET: /Product/Details/5
        public ActionResult Details(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Product product = db.Product.Find(id);
            if (product == null)
            {
                return HttpNotFound();
            }
            return View(product);
        }

        // GET: /Product/Create
        public ActionResult Create()
        {
            ViewBag.CategoryId = new SelectList(db.ProductCategory, "CategoryId", "Name");
            ViewBag.ItemTypeId = new SelectList(db.ItemType, "ItemTypeId", "ItemName");
            //ViewBag.PictureFileAttachmentId = new SelectList(db.FileAttachment, "FileAttachmentId", "FileName");
            ViewBag.DefaultLocationId = new SelectList(db.Location, "LocationId", "Name");
            Product product = new Product();
            product.ProductList = new List<Product>();
            product.ProductList = db.Product.Include(v => v.Category).ToList();
            //ViewBag.LastModUserId = new SelectList(db.User, "UserId", "Name");
            // ViewBag.LastVendorId = new SelectList(db.Vendor, "VendorId", "Name");
            return View(product);
        }

        // POST: /Product/Create
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create(Product product)
        {

            if (ModelState.IsValid)
            {
                using (ApplicationDbContext dbnew = new ApplicationDbContext())
                {
                    FileAttachment _fileattach = new FileAttachment();
                    if (product.file != null)
                    {
                        _fileattach.Data = Utility.ReturnByte(product.file);
                        _fileattach.TimeStamp = Utility.ReturnByte(product.file);
                        _fileattach.FileName = Path.GetFileName(product.file.FileName);
                        dbnew.FileAttachment.Add(_fileattach);

                    }
                    product.PictureFileAttachmentId = _fileattach.FileAttachmentId;

                    dbnew.Product.Add(product);
                    dbnew.SaveChanges();
                    return PartialView("_ProductList", product);
                }


            }

            return View(product);
        }

        public ActionResult Search(Product model, string SearchName)
        {
            if (SearchName != null)
            {
                var collection = db.Product.Where(x => x.Name.Contains(SearchName)).ToList();
                model.ProductList = collection;
            }
            if (model.CategoryId != null)
            {
                var collection = db.Product.Where(x => x.CategoryId == model.CategoryId).ToList();
                model.ProductList = collection;

            }
            if(model.Name !=null && model.CategoryId !=null)
            {
                var collection = db.Product.Where(x => x.Name.Contains(SearchName) && x.CategoryId == model.CategoryId).ToList();
                model.ProductList = collection;

            }

            return PartialView("_ProductList", model);
        }

        // GET: /Product/Edit/5
        public ActionResult Edit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Product product = db.Product.Find(id);
            if (product == null)
            {
                return HttpNotFound();
            }
            ViewBag.CategoryId = new SelectList(db.ProductCategory, "CategoryId", "Name", product.CategoryId);
            ViewBag.PictureFileAttachmentId = new SelectList(db.FileAttachment, "FileAttachmentId", "FileName", product.PictureFileAttachmentId);
            ViewBag.DefaultLocationId = new SelectList(db.Location, "LocationId", "Name", product.DefaultLocationId);
            ViewBag.LastModUserId = new SelectList(db.User, "UserId", "Name", product.LastModUserId);
            ViewBag.LastVendorId = new SelectList(db.Vendor, "VendorId", "Name", product.LastVendorId);
            return View(product);
        }

        // POST: /Product/Edit/5
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit([Bind(Include = "ProdId,Version,ItemTypeId,Name,Description,Remarks,BarCode,CategoryId,DefaultLocationId,DefaultSublocation,ReorderPoint,ReorderQuantity,Uom,MasterPackQty,InnerPackQty,CaseLength,CaseWidth,CaseHeight,CaseWeight,ProductLength,ProductWidth,ProductHeight,ProductWeight,Custom1,Custom2,Custom3,Custom4,Custom5,LastVendorId,IsSellable,IsPurchaseable,DateIntroduced,DateUpdated,LastModUserId,LastModDttm,TimeStamp,IsActive,Custom6,Custom7,Custom8,Custom9,Custom10,PictureFileAttachmentId,SoUomName,SoUomRatioStd,SoUomRatio,PoUotmName,PoUomRatioStd,PoUomRatio,TrackSerials")] Product product)
        {
            if (ModelState.IsValid)
            {
                db.Entry(product).State = EntityState.Modified;
                db.SaveChanges();
                return RedirectToAction("Index");
            }
            ViewBag.CategoryId = new SelectList(db.ProductCategory, "CategoryId", "Name", product.CategoryId);
            ViewBag.PictureFileAttachmentId = new SelectList(db.FileAttachment, "FileAttachmentId", "FileName", product.PictureFileAttachmentId);
            ViewBag.DefaultLocationId = new SelectList(db.Location, "LocationId", "Name", product.DefaultLocationId);
            ViewBag.LastModUserId = new SelectList(db.User, "UserId", "Name", product.LastModUserId);
            ViewBag.LastVendorId = new SelectList(db.Vendor, "VendorId", "Name", product.LastVendorId);
            return View(product);
        }

        // GET: /Product/Delete/5
        public ActionResult Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Product product = db.Product.Find(id);
            if (product == null)
            {
                return HttpNotFound();
            }
            return View(product);
        }

        // POST: /Product/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            Product product = db.Product.Find(id);
            db.Product.Remove(product);
            db.SaveChanges();
            return RedirectToAction("Index");
        }

        public ActionResult GetItems(int CatogoryId)
        {
            var product = db.Product.Include(p => p.Category).Include(p => p.FileAttachmentId).Include(p => p.LocationId).Include(p => p.UserId).Include(p => p.VendorId).Where(x => x.CategoryId == CatogoryId);
            return PartialView("_Items", product.ToList());
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}
