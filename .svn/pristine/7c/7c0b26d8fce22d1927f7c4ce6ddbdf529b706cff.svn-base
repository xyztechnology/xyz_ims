using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using Inventory.Models;
using InventroryManagementSystem.Models;
using System.IO;
using System.Data.Entity.Infrastructure;
using Inventory.Models.StoreProcedure;

namespace InventroryManagementSystem.Controllers
{
    public class ProductController : Controller
    {
        private ApplicationDbContext db = new ApplicationDbContext();

        // GET: /Product/
        public ActionResult Index()
        {
            ProductViewModel model = new ProductViewModel();
            model.ProductService = new ProductService();
            model.ProductService.ProductSearchList = new List<ProductService>();

            string prolist = "SP_GetProductSearch" + " " + "null" + "," + "null" + "," + 0;

            ((IObjectContextAdapter)db).ObjectContext.CommandTimeout = 280;

            var list = db.Database.SqlQuery<ProductService>(prolist).ToList();

            model.ProductService.ProductSearchList = list.ToList();

            Product product = new Product();
            product.ProductList = new List<Product>();
            product.ProductList = db.Product.Include(v => v.Category).ToList();


            return View("Index", model);
        }
        public ActionResult SearchProductList(ProductViewModel model)
        {
            model.ProductService = new ProductService();
            model.ProductService.ProductSearchList = new List<ProductService>();

            string name = model.Productobj.Name;
            if (string.IsNullOrEmpty(name))
            {
                name = "null";
            }
            string code = model.Productobj.ProductCode;
            if (string.IsNullOrEmpty(code))
            {
                code = "null";
            }
            if (model.Productobj.CategoryId == null)
            {
                model.Productobj.CategoryId = 0;
            }

            string prolist = "SP_GetProductSearch" + " " + name + "," + code + "," + model.Productobj.CategoryId;

            ((IObjectContextAdapter)db).ObjectContext.CommandTimeout = 280;

            var list = db.Database.SqlQuery<ProductService>(prolist).ToList();

            model.ProductService.ProductSearchList = list.ToList();

            return View("Index", model);


        }


        // GET: /Product/Details/5
        public ActionResult Details(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Product product = db.Product.Find(id);
            if (product == null)
            {
                return HttpNotFound();
            }
            return View(product);
        }

        // GET: /Product/Create
        public ActionResult Create()
        {
            Product product = new Product();
            product.ProductList = new List<Product>();
            product.FileAttachment = new FileAttachment();
            product.ProductList = db.Product.Include(v => v.Category).ToList();
            product.inventoryStore = new Inventorystore();
            product.inventoryStore.InventoryStorList = new List<Inventorystore>();
            for (int i = 0; i < 5; i++){
            product.inventoryStore.InventoryStorList.Add(product.inventoryStore);
            }
            //for (int i = 0; i < 5; i++)
            //{
            //   var obj = new Inventorystore();
            //    product.inventoryStore.InventoryStorList.Add(obj);
            //}

                return View(product);
        }

        public ActionResult _InventoryStore()
        {
            Inventorystore pr = new Inventorystore();
            return PartialView(pr);
        }

        // POST: /Product/Create
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create(Product product, string Quantity, HttpPostedFileBase file)
        {

            if (ModelState.IsValid)
            {
                using (ApplicationDbContext dbnew = new ApplicationDbContext())
                {
                    if (product.ProdId == 0)
                    {
                       
                        FileAttachment _fileattach = new FileAttachment();
                        if (product.file != null)
                        {
                            _fileattach.Data = Utility.ReturnByte(product.file);
                            _fileattach.TimeStamp = Utility.ReturnByte(product.file);
                            _fileattach.FileName = Path.GetFileName(product.file.FileName);
                            dbnew.FileAttachment.Add(_fileattach);

                        }

                        product.PictureFileAttachmentId = _fileattach.FileAttachmentId;
                        dbnew.Product.Add(product);

                        if (product.inventoryStore != null && product.inventoryStore.InventoryStorList != null)
                        {
                            foreach (var item in product.inventoryStore.InventoryStorList)
                            {
                                Inventorystore _inventorystore = new Inventorystore();
                                if (item.LocationId != null && item.Quantity != null)
                                {
                                  
                                    item.ProdId = product.ProdId;
                                    dbnew.Inventorystore.Add(item);
                                }
                            }
                           
                        }

                        dbnew.SaveChanges();
                    }
                    else
                    {
                        FileAttachment _fileattach = dbnew.FileAttachment.Where(x => x.FileAttachmentId == product.PictureFileAttachmentId).FirstOrDefault();
                        if (file != null)
                        {
                            _fileattach.Data = Utility.ReturnByte(file);
                            _fileattach.TimeStamp = Utility.ReturnByte(file);
                            _fileattach.FileName = Path.GetFileName(file.FileName);
                            dbnew.Entry(_fileattach).State = EntityState.Modified;
                            //dbnew.FileAttachment.Add(_fileattach);
                        }


                        dbnew.Entry(product).State = EntityState.Modified;

                        if (product.inventoryStore != null && product.inventoryStore.InventoryStorList != null)
                        {
                            foreach (var item in product.inventoryStore.InventoryStorList)
                            {
                                ApplicationDbContext inv = new ApplicationDbContext();
                                var data = inv.Inventorystore.Where(x => x.InventorystoreId == item.InventorystoreId).FirstOrDefault();
                                if (data == null)
                                {
                                    item.ProdId = product.ProdId;
                                    item.LocationId = item.LocationId;
                                    inv.Inventorystore.Add(item);
                                    inv.SaveChanges();
                                }

                                else
                                {
                                    data.ProdId = product.ProdId;
                                    data.LocationId = item.LocationId;                                
                                    inv.Entry(data).State = EntityState.Modified;
                                    inv.SaveChanges();
                                }

                            }
                                        
                        }

                        dbnew.SaveChanges();

                    }

                    product.ProductList = new List<Product>();
                    product.ProductList = db.Product.Include(v => v.Category).ToList();
                    return RedirectToAction("Create");


                }
            }

            return View(product);
        }



        public ActionResult Search(Product model)
        {
            IEnumerable<Product> list = db.Product;
            if (!string.IsNullOrEmpty(model.Name))
            {
                list = list.Where(x => x.Name.Contains(model.Name));
            }

            if (model.CategoryId != null)
            {
                list = list.Where(x => x.CategoryId == model.CategoryId);
            }
            model.ProductList = list.ToList();
            return PartialView("_ProductList", model);
        }

        // GET: /Product/Edit/5
        public ActionResult Edit(int? id)
        {
            
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Product product = db.Product.Find(id);
            if (product == null)
            {
                return HttpNotFound();
            }
            product.FileAttachment=new FileAttachment();
            product.FileAttachment = db.FileAttachment.Where(x => x.FileAttachmentId == product.PictureFileAttachmentId).FirstOrDefault();

            product.inventoryStore = new Inventorystore();
            product.inventoryStore.InventoryStorList = new List<Inventorystore>();
            product.inventoryStore.InventoryStorList = db.Inventorystore.Where(x => x.ProdId == id).ToList();

            product.ProductService = new ProductService();
            product.ProductService.ProductSearchList = new List<ProductService>();

            string productdetaillist = "SP_GetProductDetail" + " " + id;

            ((IObjectContextAdapter)db).ObjectContext.CommandTimeout = 280;

            var list = db.Database.SqlQuery<ProductService>(productdetaillist).ToList();

            product.ProductService.ProductSearchList = list.ToList();
           
            return PartialView("_Common", product);
        }

        // POST: /Product/Edit/5
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit(Product product)
        {
            if (ModelState.IsValid)
            {
                db.Entry(product).State = EntityState.Modified;
                db.SaveChanges();
                return RedirectToAction("Index");
            }
            return View(product);
        }



        public ActionResult DeleteInventory(int id)
        {
            ApplicationDbContext db = new ApplicationDbContext();
            var Productid = db.Inventorystore.Where(x => x.InventorystoreId == id).FirstOrDefault().ProdId;
            var DelInventory = db.Inventorystore.Where(x => x.InventorystoreId == id).ToList();
            foreach (var item in DelInventory)
            {
                var a = db.Inventorystore.Where(x => x.InventorystoreId == item.InventorystoreId).FirstOrDefault();
                if (a != null)
                {
                    db.Inventorystore.Remove(a);
                    db.SaveChanges();
                }
            }

            db.SaveChanges();


            ////Product product = db.Product.Find(Productid);
            ////product.ProductService = new ProductService();
            ////product.ProductService.ProductSearchList = new List<ProductService>();

            ////string productdetaillist = "SP_GetProductDetail" + " " + Productid;

            ////((IObjectContextAdapter)db).ObjectContext.CommandTimeout = 280;

            ////var list = db.Database.SqlQuery<ProductService>(productdetaillist).ToList();

            ////product.ProductService.ProductSearchList = list.ToList();

            ////return PartialView("_Common", product);
         

           return RedirectToAction("Edit", "Product", new { @id = Productid });

        }




        // GET: /Product/Delete/5
        public ActionResult Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            Product product = db.Product.Find(id);
            if (product == null)
            {
                return HttpNotFound();
            }
            return View(product);
        }

        // POST: /Product/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            Product product = db.Product.Find(id);
            db.Product.Remove(product);
            db.SaveChanges();
            return RedirectToAction("Index");
        }

        public ActionResult GetItems(int CatogoryId)
        {
            var product = db.Product.Include(p => p.Category).Include(p => p.FileAttachment).Include(p => p.Location).Include(p => p.UserId).Include(p => p.VendorId).Where(x => x.CategoryId == CatogoryId);
            return PartialView("_Items", product.ToList());
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                db.Dispose();
            }
            base.Dispose(disposing);
        }
    }
}
